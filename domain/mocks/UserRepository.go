// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain2 "go-store/domain"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *domain2.User) (int64, map[string]string) {
	ret := _m.Called(user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domain2.User) int64); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(*domain2.User) map[string]string); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserRepository) DeleteUser(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User provides a mock function with given fields: id
func (_m *UserRepository) User(id int64) (*domain2.User, error) {
	ret := _m.Called(id)

	var r0 *domain2.User
	if rf, ok := ret.Get(0).(func(int64) *domain2.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain2.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields:
func (_m *UserRepository) Users() ([]*domain2.User, error) {
	ret := _m.Called()

	var r0 []*domain2.User
	if rf, ok := ret.Get(0).(func() []*domain2.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain2.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
